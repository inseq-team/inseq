# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry_core>=1.2.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "inseq"
version = "0.3.3"
description = "Interpretability for Sequence Generation Models 🔍"
readme = "README.md"
authors = ["The Inseq Team"]
maintainers = ["gsarti <gabriele.sarti996@gmail.com>"]
license = "Apache Software License 2.0"
repository = "https://github.com/inseq-team/inseq"
homepage = "https://github.com/inseq-team/inseq"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = ["seq2seq", "transformers", "natural language processing", "XAI", "explainable ai", "interpretability"]

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [  #! Update me
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Environment :: GPU",
  "Environment :: GPU :: NVIDIA CUDA",
  "Environment :: GPU :: NVIDIA CUDA :: 11.3",
  "Framework :: Jupyter",
  "Framework :: Sphinx",
  "Intended Audience :: Science/Research",
  "Operating System :: OS Independent",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Visualization",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11"

]

[tool.poetry.scripts]
# Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
"inseq" = "inseq.commands.cli:main"

[tool.poetry.dependencies]
python = ">=3.8.1,<3.12"

rich = "^10.13.0"
transformers =  { version = "^4.22.0", extras = ["sentencepiece", "tokenizers", "torch"] }
protobuf = "^3.20.1"
captum = "^0.6.0"
numpy = "^1.21.6"
torchtyping = "^0.1.4"
torch = "^1.13.1"
scipy = "^1.8.1"
matplotlib = "^3.5.2"
tqdm = "^4.64.0"
poethepoet = "^0.13.1"

ipykernel = { extras = ["notebook"], version = "^6.19.2", optional = true }
ipywidgets = { extras = ["notebook"], version = "^8.0.0rc2", optional = true }
joblib = { extras = ["sklearn"], version = "^1.2.0", optional = true }
scikit-learn = { extras = ["sklearn"], version = "^1.1.1", optional = true }
datasets = { extras = ["datasets"], version = "^2.3.2", optional = true }

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
recommonmark = "^0.7.1"
sphinx = "^5.3.0"
sphinxemoji = "^0.2.0"
sphinxext-opengraph = "^0.4.2"
sphinx-copybutton = "^0.4.0"
sphinx-gitstamp = "^0.3.2"
sphinx-markdown-tables = "^0.0.17"
sphinx-rtd-theme = "^1.0.0"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
gitpython = "^3.1.30"
bandit = "^1.7.4"
safety = "^2.2.0"
black = "^22.6.0"
darglint = "^1.8.1"
pre-commit = "^2.19.0"
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
ruff  = "^0.0.227"

[tool.poetry.extras]
sklearn = ["scikit-learn", "joblib"]
datasets = ["datasets"]
notebook = ["ipykernel", "ipywidgets"]

[tool.poe.tasks]
upgrade-pip = "python -m pip install --upgrade pip"
torch-cpu = "python -m pip install torch==1.13.1+cpu -f https://download.pytorch.org/whl/torch_stable.html"
torch-cuda11 = "python -m pip install torch --extra-index-url https://download.pytorch.org/whl/cu116"

[tool.black]
# https://github.com/psf/black
target-version = ["py38"]
preview = true
line-length = 119
color = true

exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''


[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
python_version = 3.8
strict = true


[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
testpaths = "tests"
python_files = "test_*.py"
norecursedirs =["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]

markers = [
  "slow",
  "require_cuda_gpu"
]

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
  "--disable-pytest-warnings",
  "--color=yes"
]

[tool.coverage.run]
parallel = true
source = [
    "inseq",
]
omit = [
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no-cover",
    "pass",
    "raise",
    "except",
    "raise NotImplementedError",
]

[tool.bandit]
targets = ["inseq"]
skips = ["B301"]

[tool.ruff]
target-version = "py38"
exclude = [
    ".git",
    ".vscode",
    ".github",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "htmlcov",
    "dev_examples",
    "dist",
    ".tox",
    "temp",
    "*.egg",
    "venv",
    ".venv",
]
fix = true
ignore = [
    "C901",
    "E731",
    "E741",
    "F821",
    "C901",
    "B006",
    "PLR2004"
]
line-length = 119
select = [
    "E", # pycodestyle errors
    "F", # pyflakes
    "W", # pycodestyle warnings
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
    "Q", # flake8-quotes
    "I", # isort
    "UP", # flake8-pyupgrade
    "PLC", # flake8-pylint
    "PLE", # flake8-pylint
    "PLR", # flake8-pylint
    "PLW", # flake8-pylint
]
src = ["inseq", "tests"]


[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["inseq"]
order-by-type = true

[tool.ruff.pyupgrade]
keep-runtime-typing = true
